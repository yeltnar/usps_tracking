{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","loaded","TrackingElement","props","tracking_obj","useState","href","tracking_number","tracking_name","has_delivered","Date","status_arr","date","toString","status","App","app_id","undefined","alert","Error","google_app_url","status_obj","setStatusObj","show_delivered","setShowDelivered","loading_data","setLoadingData","button_text","fetch","then","resp","json","tracking_elements","filtered_status_obj","local_status_obj","JSON","parse","stringify","k","console","log","filterDelivered","push","top_bar_style","backgroundColor","style","onClick","method","cache","redirect","report_obj","Boolean","window","location","hostname","match","desired_key","search","split","search_arr","q","reduce","acc","cur","tmp","key","value","getQueryValue","localStorage","getItem","setItem","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06d0583b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nlet loaded=false;\n\nfunction App(props) {\n  \n  const {app_id} = props;\n\n  if( app_id===undefined ){\n    const problem_str = \"app_id is not defined\";\n    alert(problem_str)\n    throw new Error(problem_str);\n  }\n\n  const google_app_url = `https://script.google.com/macros/s/${app_id}/exec`;\n\n  const [status_obj,setStatusObj] = useState();\n  const [show_delivered,setShowDelivered] = useState(false);\n  const [loading_data,setLoadingData] = useState(false);\n\n  const button_text = show_delivered===true ? \"Hide Delivered\" : \"Show Delivered\";\n\n  if( loaded===false ){\n    loaded=true;\n    setLoadingData(true);\n    fetch(google_app_url)\n    .then((resp)=>{\n      return resp.json();\n    })\n    .then((resp)=>{\n      setStatusObj(resp);\n      setLoadingData(false);\n    })\n  }\n\n  const tracking_elements = [];\n\n  if( status_obj!==undefined ){\n\n    const filtered_status_obj = filterDelivered(status_obj);\n\n    for(let k in filtered_status_obj){\n      tracking_elements.push(<TrackingElement tracking_obj={filtered_status_obj[k]}></TrackingElement>);\n    }\n  }\n\n  const top_bar_style = {\n    backgroundColor: loading_data===true ? \"yellow\" : \"green\",\n  }\n\n  return (<div>\n    <div style={top_bar_style}>\n      <button onClick={()=>{setShowDelivered(!show_delivered);}}>{button_text}</button>\n      <button onClick={()=>{updateList();}}>Update List</button>\n    </div>\n    <div>{tracking_elements}</div>\n  </div>);\n\n  function filterDelivered(status_obj){\n    const local_status_obj = JSON.parse(JSON.stringify(status_obj));\n    for(var k in local_status_obj){\n      if(!show_delivered && local_status_obj[k].has_delivered===true){\n        console.log(\"have delivered\")\n        delete local_status_obj[k];\n      }\n    }\n    return local_status_obj\n  }\n\n  function updateList(){\n    setLoadingData(true);\n    fetch(google_app_url, {\n      method: 'POST',\n      cache: 'no-cache',\n      redirect: 'follow'\n    })\n    .then(resp=>resp.json())\n    .then((resp)=>{\n      console.log(resp);\n      setStatusObj(resp.report_obj);\n      setLoadingData(false);\n    });\n  }\n}\n\nfunction TrackingElement(props){\n  const {tracking_obj}=props;\n  const [ele_name,setEleName] = useState();\n\n  return (<div>\n    <div><a href={`https://tools.usps.com/go/TrackConfirmAction?tLabels=${tracking_obj.tracking_number}`}>Tracking Link</a></div>\n    <br/>\n    <div>Name: {tracking_obj.tracking_name}</div>\n    <div>Number: {tracking_obj.tracking_number}</div>\n    <br/>\n    <div>Delivered: {tracking_obj.has_delivered+\"\"}</div>\n    <br/>\n    <div>Last status ({new Date(tracking_obj.status_arr[0].date).toString()}):</div>\n    <div>{tracking_obj.status_arr[0].status}</div>\n    <div></div>\n    {/* <div>{JSON.stringify(tracking_obj,null,2)}</div> */}\n    <hr></hr>\n  </div>);\n}\n\nasync function getEleName(tracking_number){\n\n  fetch(\"\").then(ret=>ret.json)\n\n  return tracking_number;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app_id = (()=>{\n  let app_id = getQueryValue(\"app_id\");\n\n  if( app_id===undefined || app_id===null ){\n    app_id = localStorage.getItem(\"app_id\");\n  }else{\n    localStorage.setItem(\"app_id\", app_id);\n  }\n\n  if( app_id===undefined || app_id===null ){\n    debugger\n    throw new Error(\"unknown app_id\");\n  }\n\n  return app_id;\n})();\n\nReactDOM.render(<App app_id={app_id} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nfunction getQueryValue(desired_key=\"q\"){\n\n  let search = window.location.search;\n\n  search = search.split(\"?\")[1];\n\n  if( search===undefined ){\n    return undefined;\n  }\n\n  let search_arr = search.split(\"&\");\n\n  let q = search_arr.reduce((acc, cur)=>{\n\n      if( acc!==undefined ){\n          return acc;\n      }\n\n      const tmp = cur.split(\"=\");\n      cur = {\n          key:tmp[0],\n          value:tmp[1]\n      }\n\n      if(cur.key === desired_key){\n          acc = cur.value\n      }\n      return acc;\n  }, undefined);\n\n  return q;\n}"],"sourceRoot":""}